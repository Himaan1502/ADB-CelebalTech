name: PR Validation (Feature ‚Üí Dev)

on:
  pull_request:
    branches:
      - dev
      - main
      - uat
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  security-events: write
  checks: write

jobs:
  # STEP 1: Secret Detection
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Determine base commit
        id: base-commit
        run: |
          echo "base=${{ github.event.pull_request.base.sha }}" >> $GITHUB_OUTPUT
          echo "head=${{ github.sha }}" >> $GITHUB_OUTPUT
          
      - name: Run TruffleHog Secret Detection
        id: trufflehog
        run: |
          set -e
          
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          
          echo "üîç Starting TruffleHog secret scan..."
          
          trufflehog git file://. --since-commit=${{ steps.base-commit.outputs.base }} --branch=${{ github.head_ref }} --json --no-update > trufflehog-results.json || true
          
          if [ -s trufflehog-results.json ]; then
            TOTAL_SECRETS=$(jq '. | length' trufflehog-results.json 2>/dev/null || echo "0")
            VERIFIED_SECRETS=$(jq '[.[] | select(.Verified==true)] | length' trufflehog-results.json 2>/dev/null || echo "0")
            UNVERIFIED_SECRETS=$(jq '[.[] | select(.Verified==false)] | length' trufflehog-results.json 2>/dev/null || echo "0")
            
            echo "secrets-found=true" >> $GITHUB_OUTPUT
            echo "total=$TOTAL_SECRETS" >> $GITHUB_OUTPUT
            echo "verified=$VERIFIED_SECRETS" >> $GITHUB_OUTPUT
            echo "unverified=$UNVERIFIED_SECRETS" >> $GITHUB_OUTPUT
            
            echo ""
            echo "‚ùå SECRETS DETECTED: Total=$TOTAL_SECRETS (Verified=$VERIFIED_SECRETS, Unverified=$UNVERIFIED_SECRETS)"
          else
            echo "secrets-found=false" >> $GITHUB_OUTPUT
            echo "total=0" >> $GITHUB_OUTPUT
            echo "verified=0" >> $GITHUB_OUTPUT
            echo "unverified=0" >> $GITHUB_OUTPUT
            echo "‚úÖ No secrets detected"
          fi
          
      - name: Display Secret Details
        if: always() && steps.trufflehog.outputs.secrets-found == 'true'
        run: |
          echo "üìã Detailed Findings:"
          jq -r '.[] | "üî¥ \(.DetectorType) in \(.SourceMetadata.Data.Git.file // "unknown"):\(.SourceMetadata.Data.Git.line // "?") [Verified: \(if .Verified then "YES" else "No" end)]"' trufflehog-results.json || cat trufflehog-results.json
          
      - name: Convert to SARIF
        if: always() && hashFiles('trufflehog-results.json') != ''
        run: |
          if [ -s trufflehog-results.json ]; then
            trufflehog convert --input trufflehog-results.json --format sarif --output trufflehog-results.sarif || true
          fi
          
      - name: Upload SARIF
        if: always() && hashFiles('trufflehog-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trufflehog-results.sarif
          category: trufflehog-pr
          
      - name: Upload Report
        if: always() && hashFiles('trufflehog-results.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-report-pr-${{ github.event.pull_request.number }}
          path: trufflehog-results.json
          retention-days: 90
          
      - name: Fail if secrets found
        if: steps.trufflehog.outputs.secrets-found == 'true'
        run: |
          echo "üö® SECURITY VIOLATION - Secrets detected!"
          echo ""
          echo "Summary: ${{ steps.trufflehog.outputs.total }} secrets (${{ steps.trufflehog.outputs.verified }} verified)"
          echo ""
          echo "Required Actions:"
          echo "1. Remove all secrets from code"
          echo "2. Use Databricks Secret Scopes: dbutils.secrets.get(scope='scope', key='key')"
          echo "3. Rotate any verified credentials immediately"
          exit 1

  # STEP 2: Code Quality
  lint:
    name: Code Quality Checks
    needs: [secret-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install nbqa==1.7.1 black==23.3.0 flake8==6.0.0 isort==5.12.0
          
      - name: Find Python files
        id: find-files
        run: |
          PYTHON_FILES=$(find . -type f -name "*.py" ! -path "./.git/*" ! -path "./.venv/*" ! -path "./venv/*" | wc -l)
          NOTEBOOK_FILES=$(find . -type f -name "*.ipynb" ! -path "./.git/*" | wc -l)
          
          echo "python-files=$PYTHON_FILES" >> $GITHUB_OUTPUT
          echo "notebook-files=$NOTEBOOK_FILES" >> $GITHUB_OUTPUT
          echo "Found: $PYTHON_FILES Python files, $NOTEBOOK_FILES notebooks"
          
      - name: Run Black
        id: black-check
        if: steps.find-files.outputs.python-files > 0 || steps.find-files.outputs.notebook-files > 0
        continue-on-error: true
        run: |
          echo "üé® Checking code formatting..."
          black . --line-length=120 --check --diff --exclude='/(\.git|\.venv|venv|__pycache__)/'
          
      - name: Run isort
        id: isort-check
        if: steps.find-files.outputs.python-files > 0
        continue-on-error: true
        run: |
          echo "üì¶ Checking import sorting..."
          isort . --profile=black --line-length=120 --skip-gitignore --check-only --diff
          
      - name: Run Flake8
        id: flake8-check
        if: steps.find-files.outputs.python-files > 0 || steps.find-files.outputs.notebook-files > 0
        continue-on-error: true
        run: |
          echo "üîç Running linter..."
          flake8 . --max-line-length=120 --ignore=F403,F405,E203,W503 --extend-ignore=E501,F821,E231,E241,E202,E402 --exclude=.git,.venv,venv,__pycache__ --count
        
      - name: Check results
        if: steps.black-check.outcome == 'failure' || steps.isort-check.outcome == 'failure' || steps.flake8-check.outcome == 'failure'
        run: |
          echo "‚ùå Code quality issues detected!"
          [ "${{ steps.black-check.outcome }}" == "failure" ] && echo "  - Black: formatting issues"
          [ "${{ steps.isort-check.outcome }}" == "failure" ] && echo "  - isort: import sorting issues"
          [ "${{ steps.flake8-check.outcome }}" == "failure" ] && echo "  - Flake8: style violations"
          echo ""
          echo "Fix: black . --line-length=120 && isort . --profile=black"
          exit 1

  # STEP 3: Bundle Configuration Validation (Local Only - No Azure)
  validate-config:
    name: Validate Bundle Configuration
    needs: [secret-scan, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          databricks --version
        
      - name: Check Bundle Structure
        run: |
          echo "üìÇ Checking bundle structure..."
          
          # Check for databricks.yml
          if [ ! -f "databricks.yml" ]; then
            echo "‚ùå databricks.yml not found"
            exit 1
          fi
          echo "‚úÖ databricks.yml found"
          
          # Check for resources directory
          if [ -d "resources" ]; then
            echo "‚úÖ resources/ directory found"
            RESOURCE_FILES=$(find resources -name "*.yml" -o -name "*.yaml" | wc -l)
            echo "   Found $RESOURCE_FILES resource files"
          fi
          
          # Display bundle structure
          echo ""
          echo "Bundle structure:"
          tree -L 2 -I 'venv|.venv|__pycache__|.git' || ls -R
        
      - name: Validate Bundle Syntax
        run: |
          echo "üîç Validating bundle configuration..."
          
          # Validate without connecting to workspace
          # This checks YAML syntax and structure only
          databricks bundle validate --target dev 2>&1 | tee validation.log || true
          
          # Check if validation succeeded
          if grep -q "Error" validation.log; then
            echo "‚ùå Bundle validation failed - check configuration"
            cat validation.log
            exit 1
          fi
          
          echo "‚úÖ Bundle configuration is valid"
          
      - name: Upload Validation Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bundle-validation-log-${{ github.event.pull_request.number }}
          path: validation.log
          retention-days: 30

  # STEP 4: PR Status Comment
  pr-comment:
    name: Post PR Status
    needs: [secret-scan, lint, validate-config]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Create PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const secretScan = '${{ needs.secret-scan.result }}';
            const lint = '${{ needs.lint.result }}';
            const validate = '${{ needs.validate-config.result }}';
            
            const secretsFound = '${{ needs.secret-scan.outputs.secrets-found }}' === 'true';
            const totalSecrets = '${{ needs.secret-scan.outputs.total }}' || '0';
            const verifiedSecrets = '${{ needs.secret-scan.outputs.verified }}' || '0';
            
            let emoji = '‚úÖ';
            let status = 'All checks passed!';
            let details = '';
            let hasFailures = false;
            let hasCritical = false;
            
            // Secret Detection
            if (secretScan !== 'success') {
              hasFailures = true;
              hasCritical = true;
              emoji = 'üö®';
              status = 'CRITICAL - Security issues detected';
              details += `* üö® **Secret detection: FAILED**\n`;
              if (secretsFound) {
                details += `  * Found ${totalSecrets} secrets (${verifiedSecrets} verified)\n`;
              }
            } else {
              details += '* ‚úÖ Secret detection: passed\n';
            }
            
            // Code Quality
            if (lint !== 'success') {
              hasFailures = true;
              emoji = emoji === '‚úÖ' ? '‚ùå' : emoji;
              status = status === 'All checks passed!' ? 'PR validation failed' : status;
              details += '* ‚ùå Code quality: FAILED\n';
            } else {
              details += '* ‚úÖ Code quality: passed\n';
            }
            
            // Bundle Validation
            if (validate !== 'success') {
              hasFailures = true;
              emoji = emoji === '‚úÖ' ? '‚ùå' : emoji;
              status = status === 'All checks passed!' ? 'PR validation failed' : status;
              details += '* ‚ùå Bundle configuration: FAILED\n';
            } else {
              details += '* ‚úÖ Bundle configuration: passed\n';
            }
            
            // Build comment
            let comment = `## ${emoji} PR Validation Results\n\n**${status}**\n\n### Checks:\n${details}\n`;
            
            if (hasFailures) {
              comment += '\n---\n\n';
              if (hasCritical) {
                comment += '### üö® Critical Security Issues\n';
                comment += '**Secrets detected in code!** This PR cannot be merged.\n\n';
                comment += '**Required Actions:**\n';
                comment += '1. Remove all secrets from your code\n';
                comment += '2. Use Databricks Secret Scopes instead\n';
                comment += '3. Rotate any exposed credentials\n\n';
              } else {
                comment += '### ‚ö†Ô∏è Action Required\n';
                comment += 'Please fix the failed checks before merging.\n\n';
              }
            }
            
            comment += '\n---\n*Automated PR validation ‚Ä¢ No Azure deployment*';
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
