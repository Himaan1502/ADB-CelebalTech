name: CI/CD for Databricks Bundles
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      skip-linting:
        description: 'Skip linting checks'
        required: false
        type: boolean
        default: false
      skip-secret-scan:
        description: 'Skip secret scanning (emergency only)'
        required: false
        type: boolean
        default: false

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read    # Required to checkout code
  security-events: write  # Required for security scanning results

jobs:
  # Secret Detection - Runs first to block pipeline if secrets found
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.skip-secret-scan == 'true') }}
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # full history for comprehensive scan

      # Determine the base commit for comparison
      - name: Determine base commit
        id: base-commit
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "base=${{ github.event.pull_request.base.sha }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            echo "base=${{ github.event.before }}" >> $GITHUB_OUTPUT
          else
            # For initial commits or force pushes, scan from first commit
            FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
            echo "base=$FIRST_COMMIT" >> $GITHUB_OUTPUT
          fi
          echo "head=${{ github.sha }}" >> $GITHUB_OUTPUT

      # Run TruffleHog via official Action
      - name: Run TruffleHog Secret Detection
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        id: trufflehog
        with:
          path: ./
          base: ${{ steps.base-commit.outputs.base }}
          head: ${{ steps.base-commit.outputs.head }}
          extra_args: --only-verified --json --output trufflehog-results.json --no-update

      # Convert JSON â†’ SARIF for GitHub Code Scanning
      - name: Convert JSON report to SARIF
        if: always() && hashFiles('trufflehog-results.json') != ''
        run: |
          echo "Installing TruffleHog CLI for SARIF conversion..."
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | bash
          echo "Converting JSON to SARIF..."
          trufflehog convert --input trufflehog-results.json --format sarif --output trufflehog-results.sarif || true

      # Upload SARIF to GitHub Code Scanning Alerts
      - name: Upload SARIF to GitHub Security Alerts
        if: always() && hashFiles('trufflehog-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trufflehog-results.sarif
          category: trufflehog

      # Upload raw JSON results as artifact for audit
      - name: Upload TruffleHog JSON Report
        if: always() && hashFiles('trufflehog-results.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-report
          path: trufflehog-results.json

      # Check if secrets were found
      - name: Check scan results
        if: always()
        id: check-results
        run: |
          if [ ! -f trufflehog-results.json ]; then
            echo "status=no-results" >> $GITHUB_OUTPUT
            echo "No results file generated - scan may have been skipped"
          elif [ -s trufflehog-results.json ]; then
            echo "status=secrets-found" >> $GITHUB_OUTPUT
            echo "Secrets detected in scan results"
          else
            echo "status=clean" >> $GITHUB_OUTPUT
            echo "No secrets detected"
          fi

      # Human-readable console summary
      - name: Secret scan summary
        if: always() && steps.check-results.outputs.status == 'clean'
        run: echo "No secrets detected - pipeline can proceed"

      - name: Secret scan warning
        if: always() && steps.check-results.outputs.status == 'no-results'
        run: echo "Secret scan produced no results - proceeding with caution"

      - name: Secret scan failed
        if: always() && steps.check-results.outputs.status == 'secrets-found'
        run: |
          echo "SECRETS DETECTED!"
          echo "Pipeline blocked to prevent credential exposure."
          echo "Please remove secrets and use GitHub Secrets or Azure Key Vault instead."
          exit 1

  # PR Validation - Always includes linting
  validate:
    needs: [secret-scan]
    if: |
      github.event_name == 'pull_request' && 
      (needs.secret-scan.result == 'success' || needs.secret-scan.result == 'skipped')
    uses: Himaan1502/ADB-Template/.github/workflows/reusable-ci-cd.yml@main
    with:
      environment: dev
      skip-linting: false  # Always run linting for PRs
    secrets:
      client-id: ${{ secrets.AZURE_CLIENT_ID }}
      tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  # DEV Deployment - WITH Linting
  deploy-dev:
    needs: [secret-scan]
    if: |
      github.event_name != 'pull_request' && 
      (needs.secret-scan.result == 'success' || needs.secret-scan.result == 'skipped')
    uses: Himaan1502/ADB-Template/.github/workflows/reusable-ci-cd.yml@main
    with:
      environment: dev
      skip-linting: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.skip-linting == 'true' }}
    secrets:
      client-id: ${{ secrets.AZURE_CLIENT_ID }}
      tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  # UAT Deployment - NO Linting (depends on dev success)
  deploy-uat:
    needs: [deploy-dev]
    if: |
      github.event_name != 'pull_request' && 
      needs.deploy-dev.result == 'success'
    uses: Himaan1502/ADB-Template/.github/workflows/reusable-ci-cd.yml@main
    with:
      environment: uat
      skip-linting: true  # Always skip linting for UAT - code already validated in dev
    secrets:
      client-id: ${{ secrets.AZURE_CLIENT_ID }}
      tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
